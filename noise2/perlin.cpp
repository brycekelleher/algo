#include <math.h>
#include <stdio.h>

static bool start = 0;
static int p[512];
#if 1
static int permutation[] = { 151,160,137,91,90,15,
131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,
21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,
74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,
230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,
80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,
164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,
118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,
183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,
172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,
218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,
145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,
115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,
141,128,195,78,66,215,61,156,180
};
#endif

#if 0
static int permutation[] =
{
163,  42,  50,  38,  93,  82, 172, 128, 185,  43, 192,  69,  14,  19,  78, 181, 
 64,  54,  61, 122, 191, 116,  80,  89,  81,  23, 162,  62, 145, 175, 195, 182, 
221,  47, 109,  37, 184, 217, 101, 104, 159,  65, 100,  72, 112,  53, 216, 137, 
176, 243, 205, 117, 166,  45, 248, 212,   2,  22, 170, 135, 234, 168, 245, 254, 
 84, 255,  36,  71, 119,  95, 236, 126, 156, 121, 183,  41, 204, 123, 252, 155, 
105,  60,   6,   0, 225,   7, 196, 199,  70, 177, 173,  85, 190,  91, 150, 240, 
165,  99, 134,  88, 210,  30, 186, 193,  21, 174, 239, 136,  83,  24, 154, 127, 
167, 219, 153, 130,  29,  18,  90, 158, 202,  35, 188, 237, 110, 169, 201,  34, 
131, 138, 132, 246,  76,  17, 118, 114, 142, 253, 161,  20, 139,  77,  26, 129, 
141,  56,  32, 203, 106, 251, 214, 111, 198, 209, 113,  40, 115, 208,  44, 180, 
230,  31,   1, 146,  94,  28,   4,  68, 147, 226, 160, 247,   5, 120,  79,  12, 
 49,  67,  59, 124, 207,  87,  97, 215,   3, 103, 249, 144,  74, 107, 133, 178, 
228, 152, 149,  48, 220, 211, 218,   9,  57, 197,  33,  73, 194,  96,  75, 242, 
 51, 223, 241, 231, 171, 179,  52,  27, 200, 227, 224, 222,  66, 164,  39, 250, 
140,  98, 213,  13,  92, 189, 157,  58, 238, 187, 151,  86, 233, 206, 235, 229, 
 16,  11, 102,  55,  63,  25, 143,  10, 244, 148, 125, 232,   8,  15, 108,  46
};
#endif
 
/* Function declarations */
float   fade(float t);
float   lerp(float t, float a, float b);
float   grad(int hash, float x, float y, float z); 
void     init();
float   pnoise(float x, float y, float z);
  
void init()
{
int i;
for(i = 0; i < 256 ; i++) 
    p[256+i] = p[i] = permutation[i]; 
}
  
float pnoise(float x, float y, float z) 
{
	if(!start)
	{
		start = 1;
		init();
	}

int   X = (int)floor(x) & 255,             /* FIND UNIT CUBE THAT */
      Y = (int)floor(y) & 255,             /* CONTAINS POINT.     */
      Z = (int)floor(z) & 255;
x -= floor(x);                             /* FIND RELATIVE X,Y,Z */
y -= floor(y);                             /* OF POINT IN CUBE.   */
z -= floor(z);
float  u = fade(x),                       /* COMPUTE FADE CURVES */
        v = fade(y),                       /* FOR EACH OF X,Y,Z.  */
        w = fade(z);
int  A = p[X]+Y, 
     AA = p[A]+Z, 
     AB = p[A+1]+Z, /* HASH COORDINATES OF */
     B = p[X+1]+Y, 
     BA = p[B]+Z, 
     BB = p[B+1]+Z; /* THE 8 CUBE CORNERS, */
  
return lerp(w,lerp(v,lerp(u, grad(p[AA  ], x, y, z),   /* AND ADD */
                     grad(p[BA  ], x-1, y, z)),        /* BLENDED */
             lerp(u, grad(p[AB  ], x, y-1, z),         /* RESULTS */
                     grad(p[BB  ], x-1, y-1, z))),     /* FROM  8 */
             lerp(v, lerp(u, grad(p[AA+1], x, y, z-1 ),/* CORNERS */
                     grad(p[BA+1], x-1, y, z-1)),      /* OF CUBE */
             lerp(u, grad(p[AB+1], x, y-1, z-1),
                     grad(p[BB+1], x-1, y-1, z-1))));
}
  
float fade(float t){ return t * t * t * (t * (t * 6 - 15) + 10); }
float lerp(float t, float a, float b){ return a + t * (b - a); }
float grad(int hash, float x, float y, float z) 
{
int     h = hash & 15;       /* CONVERT LO 4 BITS OF HASH CODE */
float  u = h < 8 ? x : y,   /* INTO 12 GRADIENT DIRECTIONS.   */
        v = h < 4 ? y : h==12||h==14 ? x : z;
return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
}
